import requests
import xml.etree.ElementTree as ET
import csv

# Lista dostępnych IP
IPS = [
    "10.3.6.31",
    "10.3.6.32",
    "10.3.6.33",
    "10.3.6.34"
]

# Wybór IP przez użytkownika
print("Wybierz adres IP:")
for i, ip in enumerate(IPS, 1):
    print(f"{i}. {ip}")

choice = input("Numer IP do użycia (1–4): ").strip()
try:
    IP = IPS[int(choice) - 1]
except (IndexError, ValueError):
    print("❌ Nieprawidłowy wybór. Domyślnie używam 10.3.6.31")
    IP = "10.3.6.31"

URL = f"http://{IP}:9082/WS14_414_040G/services/wapiOtherSoapHttpPort"
SOAP_ACTION = "http://wapiOther/WapiOther.wsdl/getserviceinfoother"

HEADERS_TEMPLATE = lambda instance_no: {
    "Content-Type": "text/xml; charset=UTF-8",
    "SOAPAction": SOAP_ACTION,
    "instanceNo": instance_no
}

def parse_response(xml_text):
    try:
        root = ET.fromstring(xml_text)
        version = facade = banner = "ERR"

        for elem in root.iter():
            if elem.tag.endswith("serviceVersion"):
                version = elem.text or "ERR"
            elif elem.tag.endswith("facadeVersion"):
                facade = elem.text or "ERR"
            elif elem.tag.endswith("coreBanner"):
                banner = elem.text or "ERR"

        return version, facade, banner
    except Exception:
        return "ERR", "ERR", "ERR"

# Wczytaj listę instanceNo
with open("lista.txt", "r") as f:
    instances = [line.strip() for line in f if line.strip()]

# Wczytaj SOAP XML z pliku
with open("soap_request3.xml", "r", encoding="utf-8") as f:
    soap_template = f.read()

# Przygotuj plik CSV do zapisu wyników
with open("output.csv", "w", newline="", encoding="utf-8") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["instanceNo", "serviceVersion", "facadeVersion", "coreBanner", "sourceIP"])

    for instance_no in instances:
        headers = HEADERS_TEMPLATE(instance_no)
        body = soap_template.replace("{instance_no}", instance_no)

        try:
            response = requests.post(URL, data=body, headers=headers, verify=False)

            # Jeśli chcesz zapisywać odpowiedź XML, odkomentuj poniższą linijkę:
            # with open(f"response_{instance_no}.xml", "w", encoding="utf-8") as out:
            #     out.write(response.text)

            version, facade, banner = parse_response(response.text)
            writer.writerow([instance_no, version, facade, banner, IP])

            print(f"{instance_no} → OK ({response.status_code})")

        except Exception as ex:
            writer.writerow([instance_no, "ERR", "ERR", "ERR", IP])
            print(f"{instance_no} → ERROR: {ex}")